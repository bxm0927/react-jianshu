/*
 * CSS General Functional Style
 * @Author: xiaoming.bai
 * @Date: 2018-11-27 11:02:41
 * @Last Modified by: xiaoming.bai
 * @Last Modified time: 2020-01-01 15:20:17
 */

@import './var.scss';

// ******************************** Layouts ******************************** //
// Page container
.container {
  position: relative;
  width: $page-width;
  margin-left: auto;
  margin-right: auto;
}

// Transform centering
// Horizontally and vertically centers a child element within a parent element using `position: absolute` and `transform: translate()`.
// Similar to `flexbox`, this method does not require you to know the height or width of your parent or child so it is ideal for responsive applications.
.transform-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Flexbox centering
// Horizontally and vertically centers a child element within a parent element using `flexbox`.
.flexbox-center {
  display: flex;           // enables flexbox.
  align-items: center;     // centers the child vertically.
  justify-content: center; // centers the child horizontally.
}

// Grid centering
// Horizontally and vertically centers a child element within a parent element using `grid`.
.grid-center {
  display: grid;           // enables grid.
  align-items: center;     // centers the child vertically.
  justify-content: center; // centers the child horizontally.
}

// ******************************* Functions ******************************* //
// Display and Hide
.hide { display: none !important; }
.show { display: block !important; }
.inner { display: inline-block !important; }
.visible { visibility: visible !important; }
.invisible { visibility: hidden !important; }

// Floating and Clearing Floating
.fl { float: left; *display: inline; _display: inline; }
.fr { float: right; *display: inline; _display: inline; }
.clearfix::after { content: ''; display: block; clear: both; visibility: hidden; height: 0; }
.clearfix { *zoom: 1; }

// Truncate text
// If the text is longer than one line, it will be truncated and end with an ellipsis `…`.
.ellipsis {
  display: inline-block;
  max-width: 100%; // ensures the element has a dimension, to know when to get ellipsis.
  white-space: nowrap;
  word-wrap: break-word;
  word-break: break-all;
  -ms-text-overflow: ellipsis;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis; // makes it so that if the text exceeds its dimensions, it will end with an ellipsis.
  overflow: hidden;
}

// Forbidden text to be selected
.unselectable {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// Hide mouse cursor
.uncursor { cursor: none; }

// Remove input、button、select Ugly highlighted border when selected
.unoutline { outline: none; }

// Remove textarea、input default styles (rounded corners and inner shadows on IOS, etc.)
.unappearance { -webkit-appearance: none; }

// 去除移动端按钮 tap 后会出现一个半透明的灰色背景
.remove-tap-highlight { -webkit-tap-highlight-color: transparent; }

// 鼠标禁用样式，但仍然可以触发事件
// <input type="text" disabled="disabled">
.notallowed {
  cursor: not-allowed;
}

// 禁用元素事件
// 1. 阻止任何点击动作的执行
// 2. 使链接显示为默认光标(cursor: default)
// 3. 阻止触发 hover 和 active 状态
// 4. 阻止 JavaScript 点击事件的触发
.unevents {
  cursor: default;
  pointer-events: none;
}

// Offscreen
// Completely hide an element visually and positionally in the DOM
.offscreen {
  position: absolute;
  left: -9999px;
}

// 隐藏文本，多用于 SEO
// <a href=""><h1 class="text-hide">logo etc...</h1></a>
.hide-text {
  text-indent: -9999px;
  text-align: left;
  overflow: hidden;
}

// 文字透明
.transparent-text {
  font: 0/0 serif;
  color: transparent;
  background-color: transparent;
  text-shadow: none;
  border: 0;
}

// 书写模式：牌匾从右至左水平单行排版效果、文笺从右至左、从上至下排版效果
.retext-x {
  direction: rtl;
  unicode-bidi: bidi-override;
}
.retext-y {
  writing-mode: tb-rl;
  writing-mode: vertical-rl;
}

// 扩大热区
.extend-hotspot {
  position: relative;
  &:before { content: ''; position: absolute; top: -10px; left: -10px; right: -10px; bottom: -10px; }
}

// 安全区域
.safe-area-inset {
  display: block;
  background: #fff;
  padding-bottom: constant(safe-area-inset-bottom);
  padding-bottom: env(safe-area-inset-bottom);
}

// fadeIn、fadeOut
.fade {
  opacity: 0;
  filter: alpha(opacity=0)\9;
  -webkit-transition: opacity .15s linear;
  transition: opacity .15s linear
}
.fade.in {
  opacity: 1;
  filter: alpha(opacity=100)\9
}

// ****************************** Components ****************************** //

.btn {
  display: inline-block;
  box-sizing: border-box;
  padding: 8px 16px;
  border: 0;
  border-radius: 4px;
  color: #fff;
  text-align: center;
  white-space: nowrap;
  transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
  user-select: none;
  outline: none;
  cursor: pointer;
}
